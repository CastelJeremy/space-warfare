<div id="container">
    <h1>A.S.T.E.C.</h1>
    <table class=@(OnBeam is not null ? "clickable" : "")>
        @foreach (int i in Enumerable.Range(0, Size.HasValue ? Size.Value : 10))
        {
        <tr>
            @foreach (int j in Enumerable.Range(0, Size.HasValue ? Size.Value : 10))
            {
                <AstecCell Model="@NewGrid[i, j]" Onclick="() => OnAstecClick(i, j)"></AstecCell>
            }
        </tr>
        }
    </table>
</div>

@code
{
    [Parameter]
    public int? Size { get; set; }

    [Parameter]
    public SpacecraftDto[]? Fleet { get; set; }

    [Parameter]
    public List<Beam>? Beams { get; set; }

    [Parameter]
    public Action<BeamActionDto>? OnBeam { get; set; }

    [Parameter]
    public Action<SpacecraftDto>? OnClickSpacecraft { get; set; }

    private AstecCellModel[,] NewGrid { get; set; } = new AstecCellModel[10, 10];

    protected override void OnParametersSet()
    {
        int size = 10;
        if (Size.HasValue) {
            size = Size.Value;
        }

        NewGrid = new AstecCellModel[size, size];

        for (int i = 0; i < size; i++)
        {
            for (int j = 0; j < size; j++)
            {
                NewGrid[i, j] = new AstecCellModel();
            }
        }

        if (Fleet is not null)
        {
            foreach (SpacecraftDto spacecraft in Fleet)
            {
                for (int i = 0; i < spacecraft.Size; i++)
                {
                    int x = spacecraft.PosX;
                    int y = spacecraft.PosY;

                    switch (spacecraft.Orientation)
                    {
                        case Orientation.NORTH:
                            x += i;
                            break;
                        case Orientation.EAST:
                            y -= i;
                            break;
                        case Orientation.SOUTH:
                            x -= i;
                            break;
                        case Orientation.WEST:
                            y += i;
                            break;
                    }

                    NewGrid[x, y].SpacecraftId = spacecraft.Id;
                    NewGrid[x, y].Empty = false;
                    NewGrid[x, y].SpacecraftOrientation = spacecraft.Orientation;

                    if (spacecraft.Size == 1) {
                        NewGrid[x, y].SpacecraftPart = SpacecraftPart.FULL;
                    } else if (i == 0) {
                        NewGrid[x, y].SpacecraftPart = SpacecraftPart.HEAD;
                    } else if (i == spacecraft.Size - 1) {
                        NewGrid[x, y].SpacecraftPart = SpacecraftPart.TAIL;
                    } else {
                        NewGrid[x, y].SpacecraftPart = SpacecraftPart.BODY;
                    }
                }
            }
        }

        if (Beams is not null)
        {
            foreach (Beam b in Beams)
            {
                NewGrid[b.PosX, b.PosY].Beam = true;
                NewGrid[b.PosX, b.PosY].Hit = b.Hit;
            }
        }
    }

    private void OnAstecClick(int posX, int posY)
    {
        if (OnBeam is not null)
        {
            OnBeam(new BeamActionDto{ PosX = posX, PosY = posY });
        }

        if (OnClickSpacecraft is not null && Fleet is not null)
        {
            char? spacecraftId = NewGrid[posX, posY].SpacecraftId;
            if (spacecraftId is not null)
            {
                SpacecraftDto spacecraft = Fleet.Where((s) => s.Id == spacecraftId).First();
                OnClickSpacecraft(spacecraft);
            }
        }
    }
}

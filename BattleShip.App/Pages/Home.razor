@page "/"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject Leaderboard.LeaderboardClient LeaderboardClient

<PageTitle>Home</PageTitle>

<div id="container">
    <div id="leaderboard">
        <h1>Leaderboard</h1>
        @foreach (var item in Leaderboard) {
            <p>@item.CommanderName</p>
            <p>@item.Score</p>
        }
    </div>
    <div id ="form">
        <h1>Prepare for War !</h1>

        <button class="style" @onclick="NewWar">NEW WAR</button>

        <h2>OR</h2>

        <input class="style" type="text" placeholder="WAR ID" @bind="WarId" disabled>
        <button class="style" @onclick="JoinWar" disabled>JOIN WAR</button>
    </div>
    <div id="history">
        <h1>War History</h1>
    </div>
</div>

@code
{
    private string WarId { get; set; } = string.Empty;

    private LeaderboardItem[] Leaderboard { get; set; } = [];

    protected override async Task OnInitializedAsync()
    {
        try {
            LeaderboardReply rep = await LeaderboardClient.GetScoresAsync(new LeaderboardRequest());
            Leaderboard = rep.Items.ToArray();
        } catch(Exception) { }
    }

    private async Task NewWar()
    {
        var res = await Http.PostAsync("/war", null);

        if (res.StatusCode == System.Net.HttpStatusCode.OK)
        {
            WarDto? war = await res.Content.ReadFromJsonAsync<WarDto>();

            if (war is not null)
            {
                NavigationManager.NavigateTo($"/{war.Id}");
            }
        }
        else if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    public async Task JoinWar()
    {
        var res = await Http.PostAsync("/war/join/" + WarId, null);

        if (res.StatusCode == System.Net.HttpStatusCode.OK)
        {
            NavigationManager.NavigateTo($"/{WarId}");
        }
        else if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}

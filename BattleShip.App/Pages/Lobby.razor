@page "/{warId}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div id="container">
@if (!WarExists)
{
    <h1>This system is empty</h1>
    <p id="subtitle">Why would you start a war in an empty space ?</p>
    <button class="style" @onclick="@(() => NavigationManager.NavigateTo("/"))">GO BACK HOME</button>
}
else
{
    <h1>@WarId</h1>
    <Astec Size="AstecSize" Fleet="@Fleet" OnClickSpacecraft="SelectSpacecraft"/>
    @if (CosmosName is not null)
    {
        <input type="checkbox" id="ready">
        <label for="ready">Ready ?</label>
    }
    <div id="spacecraft-position">
    @if (SelectedSpacecraft is not null)
    {
        <p>Move Spacecraft</p>
        <button class="style" @onclick="@(() => Move(Orientation.NORTH))">ðŸ ±</button>
        <button class="style" @onclick="@(() => Move(Orientation.WEST))">ðŸ °</button>
        <button class="style" @onclick="@(() => Move(Orientation.EAST))">ðŸ ²</button>
        <button class="style" @onclick="@(() => Move(Orientation.SOUTH))">ðŸ ³</button>
        <button class="style" @onclick="Rotate">â†»</button>
    }
    else
    {
        <p>Click a Spacecraft to move it</p>
    }
    </div>
    <label for="size">Astec Size:</label>
    <select id="size" @onchange="SubmitAstecSize">
        <option value="8">8x8</option>
        <option value="10" selected>10x10</option>
        <option value="12">12x12</option>
        <option value="14">14x14</option>
    </select>
    <label for="difficulty">War Difficulty:</label>
    <select id="difficulty" @onchange="SubmitDifficulty">
        <option value="0">Easy</option>
        <option value="1">Medium</option>
        <option value="2">Hard</option>
    </select>
    <button class="style" @onclick="SubmitStart">START</button>
}
</div>

@code
{
    [Parameter]
    public string WarId { get; set; } = null!;

    private int AstecSize { get; set; }
    private bool WarExists { get; set; } = true;
    private WarStatus Status { get; set; }
    private string? CosmosName { get; set; } = null;
    private SpacecraftDto[] Fleet { get; set; } = null!;
    SpacecraftDto? SelectedSpacecraft { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            WarDto war = await Http.GetFromJsonAsync<WarDto>($"/war/{WarId}") ?? throw new Exception("Failed to decode response.");
            AstecSize = war.AstecSize;
            Fleet = war.CommanderFleet;
            Status = war.Status;
            CosmosName = war.CosmosName;
        } 
        catch (HttpRequestException)
        {
            WarExists = false;
        }
    }

    private async Task SubmitAstecSize(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            var res = await Http.PostAsJsonAsync("/war/setting/" + WarId, new WarSetting { AstecSize = int.Parse(e.Value.ToString()!)! });

            if (res.StatusCode == System.Net.HttpStatusCode.OK)
            {
                WarDto war = await Http.GetFromJsonAsync<WarDto>($"/war/{WarId}") ?? throw new Exception("Failed to decode response.");
                AstecSize = war.AstecSize;
                Fleet = war.CommanderFleet;
                Status = war.Status;
                CosmosName = war.CosmosName;
            }
        }
    }

    private async Task SubmitDifficulty(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            WarDifficulty difficulty = (WarDifficulty)int.Parse(e.Value.ToString()!)!;
            var res = await Http.PostAsJsonAsync("/war/setting/" + WarId, new WarSetting { Difficulty = difficulty });
        }
    }

    private async Task SubmitStart()
    {
        var res = await Http.PostAsync("/war/start/" + WarId, null);

        if (res.StatusCode == System.Net.HttpStatusCode.OK)
        {
            NavigationManager.NavigateTo($"/war/{WarId}");
        }
        else if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    void SelectSpacecraft(SpacecraftDto spacecraft)
    {
        SelectedSpacecraft = spacecraft;
        // For some reason this is required to rerender
        StateHasChanged();
    }

    async Task Move(Orientation orientation)
    {
        if (SelectedSpacecraft is not null)
        {
            int posX = SelectedSpacecraft.PosX;
            int posY = SelectedSpacecraft.PosY;

            switch (orientation)
            {
                case Orientation.NORTH:
                    posX--;
                    break;
                case Orientation.EAST:
                    posY++;
                    break;
                case Orientation.SOUTH:
                    posX++;
                    break;
                case Orientation.WEST:
                    posY--;
                    break;
            }

            var res = await Http.PostAsJsonAsync("/war/move/" + WarId, new SpacecraftDto {
                Id = SelectedSpacecraft.Id,
                PosX = posX,
                PosY = posY,
                Size = SelectedSpacecraft.Size,
                Orientation = SelectedSpacecraft.Orientation
            });

            res.EnsureSuccessStatusCode();
            SelectedSpacecraft.PosX = posX;
            SelectedSpacecraft.PosY = posY;
        }
    }

    async Task Rotate()
    {
        if (SelectedSpacecraft is not null)
        {
            Orientation orientation = Orientation.NORTH;
            switch (SelectedSpacecraft.Orientation)
            {
                case Orientation.NORTH:
                    orientation = Orientation.EAST;
                    break;
                case Orientation.EAST:
                    orientation = Orientation.SOUTH;
                    break;
                case Orientation.SOUTH:
                    orientation = Orientation.WEST;
                    break;
                case Orientation.WEST:
                    orientation = Orientation.NORTH;
                    break;
            }

            var res = await Http.PostAsJsonAsync("/war/move/" + WarId, new SpacecraftDto {
                Id = SelectedSpacecraft.Id,
                PosX = SelectedSpacecraft.PosX,
                PosY = SelectedSpacecraft.PosY,
                Size = SelectedSpacecraft.Size,
                Orientation = orientation
            });

            res.EnsureSuccessStatusCode();
            SelectedSpacecraft.Orientation = orientation;
        }
    }
}

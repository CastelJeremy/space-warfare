@page "/war/{warId}"
@inject HttpClient Http
@inject NavigationManager NavigationManager

<div id="container">
@if (!WarExists)
{
    <h1>This system is empty</h1>
}
else
{
    <h1>@WarId</h1>
    <div id="astec-container">
        <Astec Size="@AstecSize" Fleet="@Fleet" Beams="@CosmosBeams"/>
        <h2>Feed</h2>
        <Astec Size="@AstecSize" Beams="@CommanderBeams" OnBeam="OnCommanderBeam"/>
    </div>

    @if (Status == WarStatus.ENDED)
    {
        <h2>@(CommanderWon ? "You Won" : "You Lose")</h2>
        <button class="style" @onclick="SubmitReplay">REPLAY ?</button>
    }
}
</div>

@code
{
    [Parameter]
    public string WarId { get; set; } = null!;

    private int AstecSize { get; set; }
    private bool WarExists { get; set; } = true;
    private WarStatus Status { get; set; }
    private bool CommanderWon { get; set; }
    private SpacecraftDto[] Fleet { get; set; } = null!;
    private List<Beam> CommanderBeams { get; set; } = null!;
    private List<Beam> CosmosBeams { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            WarDto war = await Http.GetFromJsonAsync<WarDto>($"/war/{WarId}") ?? throw new Exception("Failed to decode response.");
            Fleet = war.CommanderFleet;
            AstecSize = war.AstecSize;
            CommanderBeams = war.CommanderBeams;
            CosmosBeams = war.CosmosBeams;
            Status = war.Status;
        } 
        catch (HttpRequestException)
        {
            WarExists = false;
        }
    }

    private async void OnCommanderBeam(BeamActionDto beam)
    {
        try
        {
            using HttpResponseMessage res = await Http.PostAsJsonAsync($"/war/beam/{WarId}", beam);
            BeamResponseDto beamResponse = await res.Content.ReadFromJsonAsync<BeamResponseDto>() ?? throw new Exception("Failed to decode response.");

            Status = beamResponse.Status;

            if (Status == WarStatus.ENDED)
            {
                CommanderWon = beamResponse.Winner == "Commander";
            }

            Beam commanderBeam  = new Beam { PosX = beam.PosX, PosY = beam.PosY, Hit = beamResponse.Hit };
            CommanderBeams.Add(commanderBeam);

            if (beamResponse.CosmosBeam is not null)
            {
                CosmosBeams.Add(beamResponse.CosmosBeam);
            }

            StateHasChanged();
        }
        catch (HttpRequestException)
        { }
    }

    private async Task SubmitReplay()
    {
        var res = await Http.PostAsync("/war", null);

        if (res.StatusCode == System.Net.HttpStatusCode.OK)
        {
            WarDto? war = await res.Content.ReadFromJsonAsync<WarDto>();

            if (war is not null)
            {
                NavigationManager.NavigateTo($"/{war.Id}");
            }
        }
        else if (res.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/login");
        }
    }
}
